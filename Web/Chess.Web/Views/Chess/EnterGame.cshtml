@using Chess.Web.ViewModels.ViewModels.Games
@using Chess.Common;
@model GameViewModel

<link href="~/css/chess.css" rel="stylesheet" />
<link href="~/lib/font-awesome/css/all.css" rel="stylesheet" />
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script type="text/javascript">
    var element = document.getElementById("bodyPart");
    element.classList.remove("container");
</script>

<div class="row">
    <div class="col-md-3 ml-5 mr-4 blueborder">
        <partial name="_ChatPartial" />
    </div>
    <div class="ml-4">
        @if (Model.Color == "White")
        {
        <partial name="_WhitePlayerChessBoardPartial" /> }
        else
        {
        <partial name="_BlackPlayerChessBoardPartial" />}
    </div>
    <div class="col-md-3 ml-5 blueborder">
        <div>
            <h3 class="text-danger">@Model.HostName</h3>
        </div>
        <div>
            <h3 style="visibility: hidden">host on move</h3>
        </div>
        <div id="moveDashboard" class="blueborder" style="font-size: 16px; overflow-y: scroll; height: 360px;">

        </div>
        <div>
            <h3 style="visibility: hidden">guest on move</h3>
        </div>
        <div>
            <h3 class="text-primary">@Model.GuestName</h3>
        </div>
    </div>
</div>
<partial name="_ModalPartial" />

<script type="text/javascript">
    let gameId = "@Model.Id";

    var connection = new signalR.HubConnectionBuilder().withUrl("/chessHub").build();
    connection.start().then(() => {
        connection.invoke("AddGuestConnectionIdToGame", gameId);
    });

    connection.on("ActivateGameEndModal", function () {
        $('#modal').modal('show');
        $('.modal-message').html('Your opponent left the game!');
    });

    connection.on("ReceiveNewMove", function (startId, targetId) {
        let figuretoMove = document.getElementById(startId);
        let targetCell = document.getElementById(targetId);

        if (targetId.startsWith("i")) {
            let targetElementParent = targetCell.parentElement;
            let firstChildElement = targetElementParent.firstElementChild;
            targetElementParent.removeChild(firstChildElement);
            targetElementParent.appendChild(figuretoMove);
        }
        else {
            if (targetCell.childElementCount > 0) {
                let childElement = targetCell.firstElementChild;
                targetCell.removeChild(childElement);
            }
            targetCell.appendChild(figuretoMove);
        }
    });

    let targetId = "";
    let startId = "";

    let figureClasses = "";
    let newAddressFigure = "";
    let parentElementFigure = "";
    let oldAddressFigure = "";

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
        startId = ev.target.id;
        parentElementFigure = ev.target.parentElement;
        oldAddressFigure = parentElementFigure.id;
    }

    function drop(ev) {
        ev.preventDefault();
        let data = ev.dataTransfer.getData("text");
        let currentFigure = document.getElementById(data);
        figureClasses = currentFigure.classList.item(1);
        let targetElementId = ev.target.id;

        if (targetElementId.startsWith("i")) {
            let targetFigure = ev.target;
            let targetFigureColor = targetFigure.classList.item(3);
            let figureColor = targetFigureColor.substring(0, 5);

            if (figureColor !== "@Model.Color.ToLower()") {
                let targetElementParent = ev.target.parentElement;
                let firstChildElement = targetElementParent.firstElementChild;
                targetElementParent.removeChild(firstChildElement);
                targetElementParent.appendChild(currentFigure);

                newAddressFigure = targetElementParent.id;
            }
            else {
                return;
            }
        }
        else {
            let targetCell = ev.target;
            if (targetCell.childElementCount > 0) {
                let figrueChildElement = targetCell.firstElementChild;
                let figrueChildElementColor = figrueChildElement.classList.item(3);
                let figureColor = figrueChildElementColor.substring(0, 5);
                if (figureColor === "@Model.Color.ToLower()") {
                    return;
                }
                targetCell.removeChild(figrueChildElement);
            }
            targetCell.appendChild(currentFigure);
            newAddressFigure = targetCell.id;
        }

        targetId = targetElementId;
        connection.invoke("SendNewMoveToBoard", startId, targetId, gameId);
        connection.invoke("SendNewMoveToDashboard", gameId, figureClasses, oldAddressFigure, newAddressFigure);
    }
</script>

@section Scripts
{
    <script src="~/js/make-board-inactive.js" asp-append-version="true"></script>
    <script src="~/js/add-move-to-dashboard.js" asp-append-version="true"></script>
    <script src="~/js/chat.js" asp-append-version="true"></script>
}
