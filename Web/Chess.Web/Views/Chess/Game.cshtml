@using Chess.Web.ViewModels
@model GameViewModel

<link href="~/css/chess.css" rel="stylesheet" />
<link href="~/lib/font-awesome/css/all.css" rel="stylesheet" />

@*<script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.js"></script>*@

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script type="text/javascript">
    var element = document.getElementById("bodyPart");
    element.classList.remove("container");
</script>

<div class="row">
    <div class="col-md-3 ml-5 mr-4 blueborder">
        <partial name="_ChatPartial" />
    </div>
    <div class="ml-4">
        @if (Model.Color == "White")
        {
<partial name="_WhitePlayerChessBoardPartial" /> }
else
{
<partial name="_BlackPlayerChessBoardPartial" />}
    </div>
    <div class="col-md-3 ml-5 blueborder">
        <div>
            <h3 id="guestName" class="text-danger">Waiting for opponent</h3>
        </div>
        <div>
            <h3 style="visibility: hidden">guest on move</h3>
        </div>
        <div id="moveDashboard" class="blueborder" style="font-size: 16px; overflow-y: scroll; height: 360px;">

        </div>
        <div>
            <h3 style="visibility: hidden">host on move</h3>
        </div>
        <div>
            <h3 class="text-primary">@Model.HostName</h3>
        </div>
    </div>
</div>

<script type="text/javascript">
    let gameId = @Model.Id;

    var connection = new signalR.HubConnectionBuilder().withUrl("/chessHub").build();
    connection.start().then(() => {
        connection.invoke("AddHostConnectionIdToGame", gameId);
    });

    connection.on("RedirectToDeletedGame", function () {
        window.location.href = `/Chess/DeletedGame`;
    });

    let isDragEnabled = true;

    connection.on("ReceiveNewMove", function (startId, targetId) {
        let figuretoMove = document.getElementById(startId);
        let targetCell = document.getElementById(targetId);

        if (targetId.startsWith("i")) {
            let targetElementParent = targetCell.parentElement;
            let firstChildElement = targetElementParent.firstElementChild;
            targetElementParent.removeChild(firstChildElement);
            targetElementParent.appendChild(figuretoMove);
        }
        else {
            targetCell.appendChild(figuretoMove);
        }

        isDragEnabled = true;
    });

    let targetId = "";
    let startId = "";

    let figureClasses = "";//
    let newAddressFigure = "";//
    let parentElementFigure = "";//
    let oldAddressFigure = "";//

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        if (isDragEnabled) {
            ev.dataTransfer.setData("text", ev.target.id);
            startId = ev.target.id;
            parentElementFigure = ev.target.parentElement; //
            oldAddressFigure = parentElementFigure.id; //
        }
    }

    function drop(ev) {
        ev.preventDefault();
        let data = ev.dataTransfer.getData("text");
        let currentFigure = document.getElementById(data);
        figureClasses = currentFigure.classList.item(1); //
        let targetElementId = ev.target.id;

        if (targetElementId.startsWith("i")) {
            let targetElementParent = ev.target.parentElement;
            let firstChildElement = targetElementParent.firstElementChild;
            targetElementParent.removeChild(firstChildElement);
            targetElementParent.appendChild(currentFigure);

            newAddressFigure = targetElementParent.id;//
        }
        else {
            let targetCell = ev.target;
            targetCell.appendChild(currentFigure);
            newAddressFigure = targetCell.id; //
        }

        targetId = targetElementId;
        isDragEnabled = false;
        connection.invoke("SendNewMove", startId, targetId, gameId, figureClasses, oldAddressFigure, newAddressFigure);//
    }

    connection.on("AddNewMoveToDashboard", function (currentMove, color) {
        let moveColor = "";
        if (color == "blue") {
            moveColor = "text-primary"
            console.log(moveColor);
        }
        else {
            moveColor = "text-danger"
            console.log(moveColor);
        }
        var currMove = `<div class="ml-1 ${moveColor}">${currentMove}</div>`;
        $("#moveDashboard").append(currMove);
        var moveDashboard = $("#moveDashboard");
        moveDashboard.scrollTop = moveDashboard.scrollHeight;
    });

    connection.on("AddGuestToDashboard", function (guestName) {
        $("#guestName").html(guestName);
    });
</script>

@section Scripts {
    <script>
        connection.on("NewMessage", function (userName, message) {
            var chatInfo = `<div class="text-danger">${userName}: ${escapeHtml(message)}</div>`;
            $("#messagesList").append(chatInfo);
            var messageListElement = $("#messagesList");
            messageListElement.scrollTop = messageListElement.scrollHeight;
        });

        $("#sendButton").click(function () {
            var message = $("#messageInput").val();
            var chatInfo = `<div class="text-primary">Me: ${escapeHtml(message)}</div>`;
            $("#messagesList").append(chatInfo);
            var objDiv = document.getElementById("messagesList");
            objDiv.scrollTop = objDiv.scrollHeight;     //?
            connection.invoke("Send", message, gameId); //?
            //$("#messageInput").val("");
        });

        $("#messageInput").keyup(function (event) {
            if (event.keyCode === 13 && ($("#messageInput").val() !== "")) {
                event.preventDefault();
                $("#sendButton").click();
            }
        });

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
}

